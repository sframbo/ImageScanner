
# make gui create image image translate to sides image then save input to test file

# input: photos of different views of an object in a 3d space
# output: weight of the object

# first I need to parse the words from the input text
# 1. read the first line which contains N and create a NxNxN list using: a = [None] * N
# 2. the second, third and fourth contains data for the actual image
# for the 2nd-4th, separate each word using txt.split()


# this stores info on every cell in the cube 1: depth 2: rows, 3: columns
# idea consider each row as depth of a cell with the first element being the first cell that is in front of the viewer
# eg.  <) --> [1, 1, 1]
# let's assume that the observer (front) is on the left side of the matrix:

#                  (I V :)>
#
#     _||_       [1, 1, 1]    <- left slice from viewers pov
#    ( >_>) -->  [0, 1, 1]
#                [1, 1, 1]
#                    [1, 1, 1]  <- center slice
#                    [1, 1, 1]
#                    [1, 1, 1]
#                       [1, 1, 1] <- right slice
#                       [1, 1, 1]
#                       [1, 1, 1]
#
#                  <(: ^ I)

# that means:          - left side of array x N     := front
#                      - right side of array x N    := back
#                      - last array x N             := bottom
#                      - first array x N            := top
#                      - first matrix               := left
#                      - last matrix                := right

Is voxel at image[X][Y][P]...
front viewable? = when everything to the left of the voxel is empty === image[X][Y][0->P-1] == 0 or doesn't exist
back viewable? = when everything to the right of the voxel is empty === image[X][Y][P+1->N] == 0 or doesn't exist
top viewable? = when everything on top of the voxel is empty        === image[X][0->Y-1][P] == 0
bottom viewable? = when everything below the voxel is empty         === image[X][Y+1->N][P] == 0
left viewable?  = when everything behind the voxel is empty         === image[0->X-1][Y][P] == 0
right viewable? = when everything in front of the voxel is empty    === image[X+1->N][Y][P] == 0





# ====================== ELIMINATION 1. PROCESS [DONE] ===================================

# Rules:
# - when one cell on one side is ".", all affected cells are in set to 0:
# X := {0,1,2} (horizontal slice from top to bottom)
# Y := {0, ..., N}
# -> if image_input[X]["front"][Y] == "."   then cube_space[Y][X][0->N] that means the entire row should be set to 0
# -> if image_input[X]["back"][Y] == "."    then cube_space[N-Y][X][0->N] that means the entire row should be set to 0

# -> if image_input[X]["top"][Y] == "."    then cube_space[Y][0->N][N-X] that means the entire column should be set to 0
# -> if image_input[X]["bottom"][Y] == "."  then cube_space[Y][0->N][X] that means the entire column should be set to 0

# -> if image_input[X]["left"][Y] == "."    then cube_space[0->N][X][N-Y] that means all the (0,N)[y,z] elements in each
#                                                                       matrix should be set to 0
# -> if image_input[X]["right"][Y] == "."   then cube_space[0->N][X][Y] that means the the (0,0) elements in each matrix
#                                                                       should be set to 0

# ===================== ELIMINATION 2. PROCESS ===================================
# Compare color from image_input to current cube_space element. If no match, then set that element to 0
# Compare color of cube from all sides. If there is a case where there is no match, automatically set voxel to


000

front   00 Y ||  back    0N N
left    0N Y ||  right   00 N
top     N0 Y ||  bottom  00 N

001

front   00 N ||  back    0N Y
left    00 Y ||  right   0N N
top     00 Y ||  bottom  N0 N

010

front   N0 Y ||  back    NN N
left    NN Y ||  right   N0 N
top     N0 N ||  bottom  00 Y

011

front   N0 N ||  back    NN Y
left    N0 Y ||  right   NN N
top     00 N ||  bottom  N0 Y

100

front   0N Y ||  back    00 N
left    0N N ||  right   00 Y
top     NN Y ||  bottom  0N N

101

front   0N N ||  back    00 Y
left    00 Y ||  right   0N N
top     0N Y ||  bottom  NN N

110

front   NN Y ||  back    N0 N
left    NN N ||  right   N0 Y
top     NN N ||  bottom  0N Y

111

front   NN N ||  back    N0 Y
left    N0 N ||  right   NN Y
top     0N N ||  bottom  NN Y

front viewable?



# ===================== Add up all the cells (trivial) [DONE] ==========================

- Problem beschreibung
- Limitations
- Visualisierung vom Cube (suggestion: maybe save color of viewable cubes)
- Problem dargestellt viele Randfaelle
- Demo
